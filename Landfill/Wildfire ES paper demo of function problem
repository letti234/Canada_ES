/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-130.92400415664767, 54.20263754414956],
          [-130.92400415664767, 48.03587944597349],
          [-118.31169946914765, 48.03587944597349],
          [-118.31169946914765, 54.20263754414956]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Tabular data production - percent land cover by grid-cells in TNRD


/////////////////////////////////////////////////////////////////
//
// Define our region of interest using a bounding box
//
/////////////////////////////////////////////////////////////////


var bbox = ee.Geometry.BBox(-130, 48, -120, 54);
var bboxGeo = ee.Geometry(bbox);


/////////////////////////////////////////////////////////////////
//
// Create 1 degree grid-cells
//
/////////////////////////////////////////////////////////////////


//Develop code using very coarse grid-cells

var tiles = tile(bboxGeo, 1); 

function tile(region, size_in_degrees) {
  function tile_geometry(geometry) {
    var coords = ee.List(geometry.bounds().coordinates().get(0))
    var min_point = ee.List(coords.get(0))
    var max_point = ee.List(coords.get(2))
  
    function sequence(direction) {
      var start = min_point.get(direction)  
      var stop = ee.Number(max_point.get(direction))
      return ee.List.sequence(start, stop, size_in_degrees)
    }
  
    var tiles = sequence(0).map(function (x) {
      return sequence(1).map(function (y) { 
          return ee.Feature(ee.Geometry.Rectangle([
            [ee.Number(x), ee.Number(y)],
            [
              ee.Number(x).add(size_in_degrees).min(max_point.get(0)),
              ee.Number(y).add(size_in_degrees).min(max_point.get(1))
            ]
        ]).intersection(geometry, 30))
      })
  	}).flatten()
    return ee.FeatureCollection(tiles).filterBounds(geometry)
  }

  function tile_feature_collection(feature_collection) {
    return ee.FeatureCollection(
      feature_collection.iterate(
        function (feature, acc) {
          return ee.FeatureCollection(acc).merge(tile_geometry(ee.Feature(feature).geometry()))
        }, ee.FeatureCollection([]))
    )
  }

  if (region instanceof ee.FeatureCollection)
    return tile_feature_collection(region)
  else if (region instanceof ee.Feature)
    return tile_geometry(region.geometry())
  else if (region instanceof ee.Geometry)
    return tile_geometry(region)
  else
    throw Error(
      'region must be ee.FeatureCollection, ee.Feature, or ee.Geometry. Was ' + region
    )
}

//Mapping of tiles

Map.addLayer(tiles, {color: "green"}, "Sample tiles", 0);

/////////////////////////////////////////////////////////////////
//
// Functions to prep DW data
//
/////////////////////////////////////////////////////////////////

//DW data extraction
var DW = ee.ImageCollection("GOOGLE/DYNAMICWORLD/V1")
.map(function(image){return image.clip(tiles)})
.select("label").filterBounds(tiles);


//Function that creates yearly modal images using summer imagery
//Reclassify missing grid-cells as 99
function yearly_filter(year){
  
  var modal_image = DW
       .filterDate(year.toString()+'-06-01',year.toString()+'-08-31')
       .reduce(ee.Reducer.mode()).unmask(99);
  return modal_image;
  
}


//Function that makes binary raster where 1 is forest, else zero
function forestMapMaker(dwObject){ 
var forest = ee.Image(1)
      .where(dwObject.eq(0), 0)  //Water = 0
      .where(dwObject.gt(0).and(dwObject.lte(1)),  1) //trees = 1
      .where(dwObject.gt(1).and(dwObject.lte(2)),  0) //grass = 2
      .where(dwObject.gt(2).and(dwObject.lte(3)),  0) //flooded veg = 3
      .where(dwObject.gt(3).and(dwObject.lte(4)),  0) //crops = 4
      .where(dwObject.gt(4).and(dwObject.lte(5)),  0) //shrub/scrub = 5
      .where(dwObject.gt(5).and(dwObject.lte(6)),  0) //Built = 6
      .where(dwObject.gt(6).and(dwObject.lte(7)),  0) //Bare = 7
      .where(dwObject.gt(7).and(dwObject.lte(8)),  0)
      .where(dwObject.gt(98).and(dwObject.lte(99)),  0);

//Unmask so missing grid-cells are identifiable


return forest;

}


/////////////////////////////////////////////////////////////////
//
// Forest data: zonal statistics
//
/////////////////////////////////////////////////////////////////

//Visual parameters of DW categories: note that NA is black
var dwVisParams = {
  min: 0, max:8,
  palette: ['#419bdf', '#397d49', '#88b053', '#7a87c6', '#e49635', '#dfc35a', '#c4281b', '#a59b8f', '	#b39fe1', '#000000']
};


//2017 data
var lc_2017 = yearly_filter(2017);
var for_2017 = forestMapMaker(lc_2017);


//Zonal stats function

function zonalStatMaker(mapObj) {
  
//Calculate zonal stats
var zonalStat = tiles.map(function(feature) {
  return feature.set(mapObj.reduceRegion({
    reducer: 'mean',
    geometry: feature.geometry(),
    scale: 10,
    maxPixels: 1e9
  }));
});

//Rename variable
var zonalStat = zonalStat.map(function(feat){
  return ee.Feature(feat.geometry(), { 
    mapObj: feat.get('constant'),
  });
});

return zonalStat;

}

var tiles = zonalStatMaker(for_2017);
print(tiles.limit(1));






