//Tabular data production 


/////////////////////////////////////////////////////////////////
//
// Visual parameters for DW maps
//
/////////////////////////////////////////////////////////////////

//Visual parameters of DW categories: note that NA is black
var dwVisParams = {
  min: 0, max:8,
  palette: ['#419bdf', '#397d49', '#88b053', '#7a87c6', '#e49635', '#dfc35a', '#c4281b', '#a59b8f', '	#b39fe1', '#000000']
};

/////////////////////////////////////////////////////////////////
//
// Define our region of interest using a bounding box
//
/////////////////////////////////////////////////////////////////


var bbox = ee.Geometry.BBox(-140, 41, -52, 60);

// var bbox = ee.Geometry.BBox(-110, 50, -100, 60);

Map.addLayer(bbox, {color: "red"}, "Bounding box area", 0); print("Bounding box properties", bbox);

var bboxGeo = ee.Geometry(bbox);

//Tabular data production - percent land cover by grid-cells in TNRD



/////////////////////////////////////////////////////////////////
//
// Create 1 degree grid-cells
//
/////////////////////////////////////////////////////////////////


//Develop code using very coarse grid-cells

var tiles = tile(bboxGeo, 1); 

function tile(region, size_in_degrees) {
  function tile_geometry(geometry) {
    var coords = ee.List(geometry.bounds().coordinates().get(0))
    var min_point = ee.List(coords.get(0))
    var max_point = ee.List(coords.get(2))
  
    function sequence(direction) {
      var start = min_point.get(direction)  
      var stop = ee.Number(max_point.get(direction))
      return ee.List.sequence(start, stop, size_in_degrees)
    }
  
    var tiles = sequence(0).map(function (x) {
      return sequence(1).map(function (y) { 
          return ee.Feature(ee.Geometry.Rectangle([
            [ee.Number(x), ee.Number(y)],
            [
              ee.Number(x).add(size_in_degrees).min(max_point.get(0)),
              ee.Number(y).add(size_in_degrees).min(max_point.get(1))
            ]
        ]).intersection(geometry, 30))
      })
  	}).flatten()
    return ee.FeatureCollection(tiles).filterBounds(geometry)
  }

  function tile_feature_collection(feature_collection) {
    return ee.FeatureCollection(
      feature_collection.iterate(
        function (feature, acc) {
          return ee.FeatureCollection(acc).merge(tile_geometry(ee.Feature(feature).geometry()))
        }, ee.FeatureCollection([]))
    )
  }

  if (region instanceof ee.FeatureCollection)
    return tile_feature_collection(region)
  else if (region instanceof ee.Feature)
    return tile_geometry(region.geometry())
  else if (region instanceof ee.Geometry)
    return tile_geometry(region)
  else
    throw Error(
      'region must be ee.FeatureCollection, ee.Feature, or ee.Geometry. Was ' + region
    )
}

//Mapping of tiles

Map.addLayer(tiles, {color: "green"}, "Sample tiles", 0);

/////////////////////////////////////////////////////////////////
//
// Function to create modal composites - Step 1
//
/////////////////////////////////////////////////////////////////

//DW data extraction
var DW = ee.ImageCollection("GOOGLE/DYNAMICWORLD/V1")
.map(function(image){return image.clip(tiles)})
.select("label").filterBounds(tiles);


//Function that creates yearly modal images using summer imagery
//Reclassify missing grid-cells as 99
function yearly_filter(year){
  
  var modal_image = DW
       .filterDate(year.toString()+'-06-01',year.toString()+'-08-31')
       .reduce(ee.Reducer.mode()).unmask(99);
  return modal_image;
  
}



/////////////////////////////////////////////////////////////////
//
// Function that compiles zonal statistics - apply to binary classifications (Step 3)
//
/////////////////////////////////////////////////////////////////

// Function to calculate zonal statistics and update the tiles FeatureCollection with new properties
function zonalStatMaker(tiles, mapObj, propertyName) {
  // Calculate zonal stats
  var zonalStat = tiles.map(function(feature) {
    var meanDict = mapObj.reduceRegion({
      reducer: ee.Reducer.mean().setOutputs([mapObj]),
      geometry: feature.geometry(),
      scale: 10,
      maxPixels: 1e9
    });

  
  return zonalStat;
}


/////////////////////////////////////////////////////////////////
//
// Function that makes binary raster where 1 is forest, else zero - Step 2
//
/////////////////////////////////////////////////////////////////


function forestMapMaker(dwObject){ 
var forest = ee.Image(1)
      .where(dwObject.eq(0), 0)  //Water = 0
      .where(dwObject.gt(0).and(dwObject.lte(1)),  1) //trees = 1
      .where(dwObject.gt(1).and(dwObject.lte(2)),  0) //grass = 2
      .where(dwObject.gt(2).and(dwObject.lte(3)),  0) //flooded veg = 3
      .where(dwObject.gt(3).and(dwObject.lte(4)),  0) //crops = 4
      .where(dwObject.gt(4).and(dwObject.lte(5)),  0) //shrub/scrub = 5
      .where(dwObject.gt(5).and(dwObject.lte(6)),  0) //Built = 6
      .where(dwObject.gt(6).and(dwObject.lte(7)),  0) //Bare = 7
      .where(dwObject.gt(7).and(dwObject.lte(8)),  0)
      .where(dwObject.gt(98).and(dwObject.lte(99)),  0);

//Unmask so missing grid-cells are identifiable


return forest;

}

/////////////////////////////////////////////////////////////////
//
// Forest zonal statistics
//
/////////////////////////////////////////////////////////////////

// Initial tiles FeatureCollection
var initialTiles = tiles; 

// 2017
var lc_2017 = yearly_filter(2017);
var for_2017 = forestMapMaker(lc_2017);
var tiles_2017 = zonalStatMaker(initialTiles, for_2017, 'for_2017');

// 2018
var lc_2018 = yearly_filter(2018);
var for_2018 = forestMapMaker(lc_2018);
var tiles_2018 = zonalStatMaker(tiles_2017, for_2018, 'for_2018');

// 2019
var lc_2019 = yearly_filter(2019);
var for_2019 = forestMapMaker(lc_2019);
var tiles_2019 = zonalStatMaker(tiles_2018, for_2019, 'for_2019');

// 2020
var lc_2020 = yearly_filter(2020);
var for_2020 = forestMapMaker(lc_2020);
var tiles_2020 = zonalStatMaker(tiles_2019, for_2020, 'for_2020');

// 2021
var lc_2021 = yearly_filter(2021);
var for_2021 = forestMapMaker(lc_2021);
var tiles_2021 = zonalStatMaker(tiles_2020, for_2021, 'for_2021');

// 2022
var lc_2022 = yearly_filter(2022);
var for_2022 = forestMapMaker(lc_2022);
var tiles_2022 = zonalStatMaker(tiles_2021, for_2022, 'for_2022');

// 2023
var lc_2023 = yearly_filter(2023);
var for_2023 = forestMapMaker(lc_2023);
var tiles_2023 = zonalStatMaker(tiles_2022, for_2023, 'for_2023');

print(tiles_2023.limit(1));


Export.table.toDrive(tiles_2023, "DW_output_allCan_V1", "Canada_Fires_DW");
