/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-139.32109375000002, 60.056450293524826],
          [-139.32109375000002, 41.165999656105214],
          [-51.51835937500001, 41.165999656105214],
          [-51.51835937500001, 60.056450293524826]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Tabular data production - percent land cover by grid-cells in TNRD


/////////////////////////////////////////////////////////////////
//
// Define our region of interest using a bounding box
//
/////////////////////////////////////////////////////////////////


var bbox = ee.Geometry.BBox(-140, 41, -52, 60);
Map.addLayer(bbox, {color: "red"}, "Bounding box area", 0); print("Bounding box properties", bbox);

var bboxGeo = ee.Geometry(bbox);


/////////////////////////////////////////////////////////////////
//
// Create 1 degree grid-cells
//
/////////////////////////////////////////////////////////////////


//Develop code using very coarse grid-cells

var tiles = tile(bboxGeo, 1); 

function tile(region, size_in_degrees) {
  function tile_geometry(geometry) {
    var coords = ee.List(geometry.bounds().coordinates().get(0))
    var min_point = ee.List(coords.get(0))
    var max_point = ee.List(coords.get(2))
  
    function sequence(direction) {
      var start = min_point.get(direction)  
      var stop = ee.Number(max_point.get(direction))
      return ee.List.sequence(start, stop, size_in_degrees)
    }
  
    var tiles = sequence(0).map(function (x) {
      return sequence(1).map(function (y) { 
          return ee.Feature(ee.Geometry.Rectangle([
            [ee.Number(x), ee.Number(y)],
            [
              ee.Number(x).add(size_in_degrees).min(max_point.get(0)),
              ee.Number(y).add(size_in_degrees).min(max_point.get(1))
            ]
        ]).intersection(geometry, 30))
      })
  	}).flatten()
    return ee.FeatureCollection(tiles).filterBounds(geometry)
  }

  function tile_feature_collection(feature_collection) {
    return ee.FeatureCollection(
      feature_collection.iterate(
        function (feature, acc) {
          return ee.FeatureCollection(acc).merge(tile_geometry(ee.Feature(feature).geometry()))
        }, ee.FeatureCollection([]))
    )
  }

  if (region instanceof ee.FeatureCollection)
    return tile_feature_collection(region)
  else if (region instanceof ee.Feature)
    return tile_geometry(region.geometry())
  else if (region instanceof ee.Geometry)
    return tile_geometry(region)
  else
    throw Error(
      'region must be ee.FeatureCollection, ee.Feature, or ee.Geometry. Was ' + region
    )
}

//Mapping of tiles

Map.addLayer(tiles, {color: "green"}, "Sample tiles", 0);

/////////////////////////////////////////////////////////////////
//
// Dynamic World composites
//
/////////////////////////////////////////////////////////////////

var DW = ee.ImageCollection("GOOGLE/DYNAMICWORLD/V1")
.map(function(image){return image.clip(tiles)})
.select("label").filterBounds(tiles);



//Modal composite forest 2016-2023 - suppose we use summer imagery 
function yearly_filter(year){
  
  var modal_image = DW
       .filterDate(year.toString()+'-06-01',year.toString()+'-08-31')
       .reduce(ee.Reducer.mode());

  return modal_image;
  
}


var lc_2016 = yearly_filter(2016);

var forest = ee.Image(1)
      .where(lc.eq(0), 0)  //Water v= 0
      .where(lc.gt(0).and(lc.lte(1)),  1) //trees = 1
      .where(lc.gt(1).and(lc.lte(2)),  0) //grass = 2
      .where(lc.gt(2).and(lc.lte(3)),  0) //flooded veg = 3
      .where(lc.gt(3).and(lc.lte(4)),  0) //crops = 4
      .where(lc.gt(4).and(lc.lte(5)),  0) //shrub/scrub = 5
      .where(lc.gt(5).and(lc.lte(6)),  0) //Built = 6
      .where(lc.gt(6).and(lc.lte(7)),  0) //Bare = 7
      .where(lc.gt(7).and(lc.lte(8)),  0) ;


Map.addLayer(forest);

