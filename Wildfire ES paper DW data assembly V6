//Tabular data production 


/////////////////////////////////////////////////////////////////
//
// Visual parameters for DW maps
//
/////////////////////////////////////////////////////////////////

//Visual parameters of DW categories: note that NA is black
var dwVisParams = {
  min: 0, max:8,
  palette: ['#419bdf', '#397d49', '#88b053', '#7a87c6', '#e49635', '#dfc35a', '#c4281b', '#a59b8f', '	#b39fe1', '#000000']
};

/////////////////////////////////////////////////////////////////
//
// Define our region of interest using a bounding box
//
/////////////////////////////////////////////////////////////////

//var bbox = ee.Geometry.BBox(-140, 41, -52, 60);

//Split bbox in half
var bbox = ee.Geometry.BBox(-140, 49, -95, 60);


Map.addLayer(bbox, {color: "red"}, "Bounding box area", 0); print("Bounding box properties", bbox);

var bboxGeo = ee.Geometry(bbox);

//Tabular data production - percent land cover by grid-cells in TNRD



/////////////////////////////////////////////////////////////////
//
// Create 1 degree grid-cells
//
/////////////////////////////////////////////////////////////////


//Develop code using very coarse grid-cells

var tiles = tile(bboxGeo, 1); 

function tile(region, size_in_degrees) {
  function tile_geometry(geometry) {
    var coords = ee.List(geometry.bounds().coordinates().get(0))
    var min_point = ee.List(coords.get(0))
    var max_point = ee.List(coords.get(2))
  
    function sequence(direction) {
      var start = min_point.get(direction)  
      var stop = ee.Number(max_point.get(direction))
      return ee.List.sequence(start, stop, size_in_degrees)
    }
  
    var tiles = sequence(0).map(function (x) {
      return sequence(1).map(function (y) { 
          return ee.Feature(ee.Geometry.Rectangle([
            [ee.Number(x), ee.Number(y)],
            [
              ee.Number(x).add(size_in_degrees).min(max_point.get(0)),
              ee.Number(y).add(size_in_degrees).min(max_point.get(1))
            ]
        ]).intersection(geometry, 30))
      })
  	}).flatten()
    return ee.FeatureCollection(tiles).filterBounds(geometry)
  }

  function tile_feature_collection(feature_collection) {
    return ee.FeatureCollection(
      feature_collection.iterate(
        function (feature, acc) {
          return ee.FeatureCollection(acc).merge(tile_geometry(ee.Feature(feature).geometry()))
        }, ee.FeatureCollection([]))
    )
  }

  if (region instanceof ee.FeatureCollection)
    return tile_feature_collection(region)
  else if (region instanceof ee.Feature)
    return tile_geometry(region.geometry())
  else if (region instanceof ee.Geometry)
    return tile_geometry(region)
  else
    throw Error(
      'region must be ee.FeatureCollection, ee.Feature, or ee.Geometry. Was ' + region
    )
}

//Mapping of tiles

Map.addLayer(tiles, {color: "green"}, "Sample tiles", 0);

/////////////////////////////////////////////////////////////////
//
// Function to create modal composites - Step 1
//
/////////////////////////////////////////////////////////////////

//DW data extraction
var DW = ee.ImageCollection("GOOGLE/DYNAMICWORLD/V1")
.map(function(image){return image.clip(tiles)})
.select("label").filterBounds(tiles);


//Function that creates yearly modal images using summer imagery
//Reclassify missing grid-cells as 99
function yearly_filter(year){
  
  var modal_image = DW
       .filterDate(year.toString()+'-06-01',year.toString()+'-08-31')
       .reduce(ee.Reducer.mode()).unmask(99);
  return modal_image;
  
}

/////////////////////////////////////////////////////////////////
//
// Function that makes binary raster where 1 is forest, else zero - Step 2
//
/////////////////////////////////////////////////////////////////


function MapMaker(dwObject, lulc) {
  // Create a map of lulc values to their respective indexes
  var lulcMap = {
    water: 0,
    forest: 1,
    grass: 2,
    flooded: 3,
    crops: 4,
    shrub: 5,
    built: 6,
    bare: 7,
    snow: 8,
    missing: 99
  };

  // Check if the provided lulc is valid
  if (!(lulc in lulcMap)) {
    throw new Error('Invalid lulc type');
  }

  // Get the index for the specified lulc
  var index = lulcMap[lulc];

  // Create an ee.Image and set the values based on the index
  var result = ee.Image(0)
    .where(dwObject.eq(index), 1)
    .where(dwObject.neq(index), 0);

  return result;
}


/////////////////////////////////////////////////////////////////
//
// Function that compiles zonal statistics - apply to binary classifications (Step 3)
//
/////////////////////////////////////////////////////////////////

// Function to calculate zonal statistics and update the tiles FeatureCollection with new properties
function zonalStatMaker(tiles, mapObj, propertyName) {
  // Calculate zonal stats
  var zonalStat = tiles.map(function(feature) {
    var meanDict = mapObj.reduceRegion({
      reducer: ee.Reducer.mean(),
      geometry: feature.geometry(),
      scale: 10,
      maxPixels: 1e9
    });

    // Extract the mean value as a number
    var meanValue = ee.Number(meanDict.get('constant'));

    // Set the new property without losing existing properties
    return feature.set(propertyName, meanValue);
  });

  return zonalStat;
}


/////////////////////////////////////////////////////////////////
//
// Forest zonal statistics
//
/////////////////////////////////////////////////////////////////

// Initial tiles FeatureCollection
var initialTiles = tiles; 


// 2017
var lc_2017 = yearly_filter(2017);
var for_2017 = MapMaker(lc_2017, "forest");
var tiles_2017 = zonalStatMaker(initialTiles, for_2017, 'for_2017');

// 2018
var lc_2018 = yearly_filter(2018);
var for_2018 = MapMaker(lc_2018, "forest");
var tiles_2018 = zonalStatMaker(tiles_2017, for_2018, 'for_2018');

// 2019
var lc_2019 = yearly_filter(2019);
var for_2019 = MapMaker(lc_2019, "forest");
var tiles_2019 = zonalStatMaker(tiles_2018, for_2019, 'for_2019');

// 2020
var lc_2020 = yearly_filter(2020);
var for_2020 = MapMaker(lc_2020, "forest");
var tiles_2020 = zonalStatMaker(tiles_2019, for_2020, 'for_2020');

// 2021
var lc_2021 = yearly_filter(2021);
var for_2021 = MapMaker(lc_2021, "forest");
var tiles_2021 = zonalStatMaker(tiles_2020, for_2021, 'for_2021');

// 2022
var lc_2022 = yearly_filter(2022);
var for_2022 = MapMaker(lc_2022, "forest");
var tiles_2022 = zonalStatMaker(tiles_2021, for_2022, 'for_2022');

// 2023
var lc_2023 = yearly_filter(2023);
var for_2023 = MapMaker(lc_2023, "forest");
var tiles_2023 = zonalStatMaker(tiles_2022, for_2023, 'for_2023');



/////////////////////////////////////////////////////////////////
//
// Grasslands zonal statistics
//
/////////////////////////////////////////////////////////////////


// 2017
var gra_2017 = MapMaker(lc_2017, "grass");
var tiles_2017_2 = zonalStatMaker(tiles_2023, gra_2017, 'gra_2017');

// 2018
var gra_2018 = MapMaker(lc_2018, "grass");
var tiles_2018_2 = zonalStatMaker(tiles_2017_2, gra_2018, 'gra_2018');

// 2019
var gra_2019 = MapMaker(lc_2019, "grass");
var tiles_2019_2 = zonalStatMaker(tiles_2018_2, gra_2019, 'gra_2019');

// 2020
var gra_2020 = MapMaker(lc_2020, "grass");
var tiles_2020_2 = zonalStatMaker(tiles_2019_2, gra_2020, 'gra_2020');

// 2021
var gra_2021 = MapMaker(lc_2021, "grass");
var tiles_2021_2 = zonalStatMaker(tiles_2020_2, gra_2021, 'gra_2021');

// 2022
var gra_2022 = MapMaker(lc_2022, "grass");
var tiles_2022_2 = zonalStatMaker(tiles_2021_2, gra_2022, 'gra_2022');

// 2023
var gra_2023 = MapMaker(lc_2023, "grass");
var tiles_2023_2 = zonalStatMaker(tiles_2022_2, gra_2023, 'gra_2023');




/////////////////////////////////////////////////////////////////
//
// Water zonal statistics
//
///////////////////////////////////////////////////////////////////
  
  
  // 2017
var wat_2017 = MapMaker(lc_2017, "water");
var tiles_2017_3 = zonalStatMaker(tiles_2023_2, wat_2017, 'wat_2017');

// 2018
var wat_2018 = MapMaker(lc_2018, "water");
var tiles_2018_3 = zonalStatMaker(tiles_2017_2, wat_2018, 'wat_2018');

// 2019
var wat_2019 = MapMaker(lc_2019, "water");
var tiles_2019_3 = zonalStatMaker(tiles_2018_2, wat_2019, 'wat_2019');

// 2020
var wat_2020 = MapMaker(lc_2020, "water");
var tiles_2020_3 = zonalStatMaker(tiles_2019_2, wat_2020, 'wat_2020');

// 2021
var wat_2021 = MapMaker(lc_2021, "water");
var tiles_2021_3 = zonalStatMaker(tiles_2020_2, wat_2021, 'wat_2021');

// 2022
var wat_2022 = MapMaker(lc_2022, "water");
var tiles_2022_3 = zonalStatMaker(tiles_2021_2, wat_2022, 'wat_2022');

// 2023
var wat_2023 = MapMaker(lc_2023, "water");
var tiles_2023_3 = zonalStatMaker(tiles_2022_2, wat_2023, 'wat_2023');




/////////////////////////////////////////////////////////////////
//
// flooded zonal statistics
//
///////////////////////////////////////////////////////////////////
  
  
  // 2017
var flo_2017 = MapMaker(lc_2017, "flooded");
var tiles_2017_4 = zonalStatMaker(tiles_2023_3, flo_2017, 'flo_2017');

// 2018
var flo_2018 = MapMaker(lc_2018, "flooded");
var tiles_2018_4 = zonalStatMaker(tiles_2017_4, flo_2018, 'flo_2018');

// 2019
var flo_2019 = MapMaker(lc_2019, "flooded");
var tiles_2019_4 = zonalStatMaker(tiles_2018_4, flo_2019, 'flo_2019');

// 2020
var flo_2020 = MapMaker(lc_2020, "flooded");
var tiles_2020_4 = zonalStatMaker(tiles_2019_4, flo_2020, 'flo_2020');

// 2021
var flo_2021 = MapMaker(lc_2021, "flooded");
var tiles_2021_4 = zonalStatMaker(tiles_2020_4, flo_2021, 'flo_2021');

// 2022
var flo_2022 = MapMaker(lc_2022, "flooded");
var tiles_2022_4 = zonalStatMaker(tiles_2021_4, flo_2022, 'flo_2022');

// 2023
var flo_2023 = MapMaker(lc_2023, "flooded");
var tiles_2023_4 = zonalStatMaker(tiles_2022_4, flo_2023, 'flo_2023');



/////////////////////////////////////////////////////////////////
//
// crops zonal statistics
//
///////////////////////////////////////////////////////////////////
  
  
  // 2017
var crop_2017 = MapMaker(lc_2017, "crops");
var tiles_2017_5 = zonalStatMaker(tiles_2023_4, crop_2017, 'crop_2017');

// 2018
var crop_2018 = MapMaker(lc_2018, "crops");
var tiles_2018_5 = zonalStatMaker(tiles_2017_5, crop_2018, 'crop_2018');

// 2019
var crop_2019 = MapMaker(lc_2019, "crops");
var tiles_2019_5 = zonalStatMaker(tiles_2018_5, crop_2019, 'crop_2019');

// 2020
var crop_2020 = MapMaker(lc_2020, "crops");
var tiles_2020_5 = zonalStatMaker(tiles_2019_5, crop_2020, 'crop_2020');

// 2021
var crop_2021 = MapMaker(lc_2021, "crops");
var tiles_2021_5 = zonalStatMaker(tiles_2020_5, crop_2021, 'crop_2021');

// 2022
var crop_2022 = MapMaker(lc_2022, "crops");
var tiles_2022_5 = zonalStatMaker(tiles_2021_5, crop_2022, 'crop_2022');

// 2023
var crop_2023 = MapMaker(lc_2023, "crops");
var tiles_2023_5 = zonalStatMaker(tiles_2022_5, crop_2023, 'crop_2023');



/////////////////////////////////////////////////////////////////
//
// shrub zonal statistics
//
///////////////////////////////////////////////////////////////////
  
  
  // 2017
var shr_2017 = MapMaker(lc_2017, "shrub");
var tiles_2017_6 = zonalStatMaker(tiles_2023_5, shr_2017, 'shr_2017');

// 2018
var shr_2018 = MapMaker(lc_2018, "shrub");
var tiles_2018_6 = zonalStatMaker(tiles_2017_6, shr_2018, 'shr_2018');

// 2019
var shr_2019 = MapMaker(lc_2019, "shrub");
var tiles_2019_6 = zonalStatMaker(tiles_2018_6, shr_2019, 'shr_2019');

// 2020
var shr_2020 = MapMaker(lc_2020, "shrub");
var tiles_2020_6 = zonalStatMaker(tiles_2019_6, shr_2020, 'shr_2020');

// 2021
var shr_2021 = MapMaker(lc_2021, "shrub");
var tiles_2021_6 = zonalStatMaker(tiles_2020_6, shr_2021, 'shr_2021');

// 2022
var shr_2022 = MapMaker(lc_2022, "shrub");
var tiles_2022_6 = zonalStatMaker(tiles_2021_6, shr_2022, 'shr_2022');

// 2023
var shr_2023 = MapMaker(lc_2023, "shrub");
var tiles_2023_6 = zonalStatMaker(tiles_2022_6, shr_2023, 'shr_2023');



/////////////////////////////////////////////////////////////////
//
// built zonal statistics
//
///////////////////////////////////////////////////////////////////
  
  
// 2017
var bui_2017 = MapMaker(lc_2017, "built");
var tiles_2017_7 = zonalStatMaker(tiles_2023_6, bui_2017, 'bui_2017');

// 2018
var bui_2018 = MapMaker(lc_2018, "built");
var tiles_2018_7 = zonalStatMaker(tiles_2017_7,  bui_2018, 'bui_2018');

// 2019
var bui_2019 = MapMaker(lc_2019, "built");
var tiles_2019_7 = zonalStatMaker(tiles_2018_7,  bui_2019, 'bui_2019');

// 2020
var bui_2020 = MapMaker(lc_2020, "built");
var tiles_2020_7 = zonalStatMaker(tiles_2019_7,  bui_2020, 'bui_2020');

// 2021
var bui_2021 = MapMaker(lc_2021, "built");
var tiles_2021_7 = zonalStatMaker(tiles_2020_7,  bui_2021, 'bui_2021');

// 2022
var bui_2022 = MapMaker(lc_2022, "built");
var tiles_2022_7 = zonalStatMaker(tiles_2021_7,  bui_2022, 'bui_2022');

// 2023
var bui_2023 = MapMaker(lc_2023, "built");
var tiles_2023_7 = zonalStatMaker(tiles_2022_7,  bui_2023, 'bui_2023');




/////////////////////////////////////////////////////////////////
//
// bare zonal statistics
//
///////////////////////////////////////////////////////////////////
  
  
// 2017
var bar_2017 = MapMaker(lc_2017, "bare");
var tiles_2017_8 = zonalStatMaker(tiles_2023_7, bar_2017, 'bar_2017');

// 2018
var bar_2018 = MapMaker(lc_2018, "bare");
var tiles_2018_8 = zonalStatMaker(tiles_2017_8,  bar_2018, 'bar_2018');

// 2019
var bar_2019 = MapMaker(lc_2019, "bare");
var tiles_2019_8 = zonalStatMaker(tiles_2018_8,  bar_2019, 'bar_2019');

// 2020
var bar_2020 = MapMaker(lc_2020, "bare");
var tiles_2020_8 = zonalStatMaker(tiles_2019_8,  bar_2020, 'bar_2020');

// 2021
var bar_2021 = MapMaker(lc_2021, "bare");
var tiles_2021_8 = zonalStatMaker(tiles_2020_8,  bar_2021, 'bar_2021');

// 2022
var bar_2022 = MapMaker(lc_2022, "bare");
var tiles_2022_8 = zonalStatMaker(tiles_2021_8,  bar_2022, 'bar_2022');

// 2023
var bar_2023 = MapMaker(lc_2023, "bare");
var tiles_2023_8 = zonalStatMaker(tiles_2022_8,  bar_2023, 'bar_2023');






/////////////////////////////////////////////////////////////////
//
// snow zonal statistics
//
///////////////////////////////////////////////////////////////////
  
  
// 2017
var sno_2017 = MapMaker(lc_2017, "snow");
var tiles_2017_9 = zonalStatMaker(tiles_2023_8, sno_2017, 'sno_2017');

// 2018
var sno_2018 = MapMaker(lc_2018, "snow");
var tiles_2018_9 = zonalStatMaker(tiles_2017_9,  sno_2018, 'sno_2018');

// 2019
var sno_2019 = MapMaker(lc_2019, "snow");
var tiles_2019_9 = zonalStatMaker(tiles_2018_9,  sno_2019, 'sno_2019');

// 2020
var sno_2020 = MapMaker(lc_2020, "snow");
var tiles_2020_9 = zonalStatMaker(tiles_2019_9,  sno_2020, 'sno_2020');

// 2021
var sno_2021 = MapMaker(lc_2021, "snow");
var tiles_2021_9 = zonalStatMaker(tiles_2020_9,  sno_2021, 'sno_2021');

// 2022
var sno_2022 = MapMaker(lc_2022, "snow");
var tiles_2022_9 = zonalStatMaker(tiles_2021_9,  sno_2022, 'sno_2022');

// 2023
var sno_2023 = MapMaker(lc_2023, "snow");
var tiles_2023_9 = zonalStatMaker(tiles_2022_9,  sno_2023, 'sno_2023');


/////////////////////////////////////////////////////////////////
//
// missing zonal statistics
//
///////////////////////////////////////////////////////////////////
  
  
// 2017
var mis_2017 = MapMaker(lc_2017, "missing");
var tiles_2017_10 = zonalStatMaker(tiles_2023_9, mis_2017, 'mis_2017');

// 2018
var mis_2018 = MapMaker(lc_2018, "missing");
var tiles_2018_10 = zonalStatMaker(tiles_2017_10,  mis_2018, 'mis_2018');

// 2019
var mis_2019 = MapMaker(lc_2019, "missing");
var tiles_2019_10 = zonalStatMaker(tiles_2018_10,  mis_2019, 'mis_2019');

// 2020
var mis_2020 = MapMaker(lc_2020, "missing");
var tiles_2020_10 = zonalStatMaker(tiles_2019_10,  mis_2020, 'mis_2020');

// 2021
var mis_2021 = MapMaker(lc_2021, "missing");
var tiles_2021_10 = zonalStatMaker(tiles_2020_10,  mis_2021, 'mis_2021');

// 2022
var mis_2022 = MapMaker(lc_2022, "missing");
var tiles_2022_10 = zonalStatMaker(tiles_2021_10,  mis_2022, 'mis_2022');

// 2023
var mis_2023 = MapMaker(lc_2023, "missing");
var tiles_2023_10 = zonalStatMaker(tiles_2022_10,  mis_2023, 'mis_2023');


print(tiles_2023_10.limit(1));











Export.table.toDrive(tiles_2023_10, "DW_output_allCan_V1_ALLVARS_SPLIT", "Canada_Fires_DW");




